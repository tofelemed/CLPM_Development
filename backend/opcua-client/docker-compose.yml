version: '3.8'

services:
  opcua-client:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: clpm-opcua-client
    restart: unless-stopped
    ports:
      - "3002:3002"  # API server
      - "9090:9090"  # Metrics server
    environment:
      # Application configuration
      - NODE_ENV=production
      - LOG_LEVEL=info
      - APPLICATION_NAME=CLPM OPC UA Client
      - APPLICATION_URI=urn:clpm:opcua:client
      - PRODUCT_URI=urn:clpm:opcua:client
      
      # Server configuration  
      - PORT=3002
      - HOST=0.0.0.0
      - ENABLE_CORS=true
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173
      - ENABLE_COMPRESSION=true
      
      # Rate limiting (optional)
      - RATE_LIMIT_ENABLED=false
      - RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
      - RATE_LIMIT_MAX=100
      
      # Authentication (optional)
      - AUTH_ENABLED=false
      # - API_KEY=your-secret-api-key
      # - JWT_SECRET=your-jwt-secret
      
      # Certificate configuration
      - CERTIFICATE_DIR=/app/certs
      - CERTIFICATE_LIFETIME_DAYS=365
      - AUTO_TRUST_UNKNOWN_CERTS=false
      
      # OPC UA client settings
      - DEFAULT_SAMPLING_INTERVAL=1000
      - MAX_SESSION_SUBSCRIPTIONS=1000
      - CONNECTION_TIMEOUT_MS=30000
      - RECONNECT_DELAY_MS=5000
      - MAX_RECONNECT_DELAY_MS=60000
      - MAX_RECONNECT_ATTEMPTS=10
      - HEALTH_CHECK_INTERVAL_MS=60000
      
      # Data handling
      - BATCH_SIZE=100
      - BATCH_TIMEOUT_MS=5000
      - MAX_QUEUE_SIZE=10000
      
      # Metrics server
      - METRICS_PORT=9090
      - METRICS_HOST=0.0.0.0
      - PROMETHEUS_ENABLED=true
      
    volumes:
      # Persistent certificate storage
      - opcua-certs:/app/certs
      # Configuration persistence (optional)
      - opcua-config:/app/config
      # Log storage (optional)
      - opcua-logs:/app/logs
      
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3002/health').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
      
    networks:
      - clpm-network

  # Optional: Add a simple OPC UA test server for development
  opcua-test-server:
    image: node:20-alpine
    container_name: clpm-opcua-test-server
    profiles: ["test", "development"]  # Only start with specific profiles
    working_dir: /app
    command: >
      sh -c "
        npm install -g node-opcua-server &&
        node -e \"
          const { OPCUAServer, Variant, DataType, standardUnits } = require('node-opcua');
          const server = new OPCUAServer({
            port: 4840,
            resourcePath: '/UA/TestServer',
            buildInfo: {
              productName: 'Test OPC UA Server',
              buildNumber: '1',
              buildDate: new Date()
            }
          });
          
          server.initialize(() => {
            const addressSpace = server.engine.addressSpace;
            const namespace = addressSpace.getOwnNamespace();
            
            // Create some test variables
            const device = namespace.addObject({
              organizedBy: addressSpace.rootFolder.objects,
              browseName: 'TestDevice'
            });
            
            // PV variable
            const pv = namespace.addVariable({
              componentOf: device,
              browseName: 'PV',
              dataType: 'Double',
              value: {
                get: () => new Variant({ dataType: DataType.Double, value: Math.random() * 100 })
              }
            });
            
            // SP variable  
            const sp = namespace.addVariable({
              componentOf: device,
              browseName: 'SP',
              dataType: 'Double',
              value: {
                get: () => new Variant({ dataType: DataType.Double, value: 50 + Math.random() * 10 })
              }
            });
            
            // OP variable
            const op = namespace.addVariable({
              componentOf: device,
              browseName: 'OP',
              dataType: 'Double',
              value: {
                get: () => new Variant({ dataType: DataType.Double, value: Math.random() * 100 })
              }
            });
            
            server.start(() => {
              console.log('Test OPC UA Server started on port 4840');
              console.log('Server endpoint: opc.tcp://localhost:4840/UA/TestServer');
            });
          });
        \"
      "
    ports:
      - "4840:4840"
    networks:
      - clpm-network

volumes:
  opcua-certs:
    driver: local
  opcua-config:
    driver: local  
  opcua-logs:
    driver: local

networks:
  clpm-network:
    driver: bridge
    name: clpm-network